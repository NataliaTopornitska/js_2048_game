{"mappings":"AEEA,MAAM,EACJ,OAAO,WAAa,CAClB,KAAM,OACN,QAAS,UACT,IAAK,MACL,KAAM,MACR,CAAE,AAEF,QAAO,iBAAkB,CACvB,MAAO,CACL,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AACH,CAEA,YAAY,EAAe,EAAK,eAAe,EAAE,CAAE,CACjD,IAAI,CAAC,UAAU,CAAG,EAAK,UAAU,CAAC,IAAI,CACtC,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,YAAY,CAAG,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,IAC9C,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CAErB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACI,IAArB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,EAClB,EAAW,IAAI,CAAC,CAAC,EAAG,EAAE,EAK5B,OAAO,CACT,CAEA,aAAa,EAAQ,CAAC,CAAE,CACtB,IAAM,EAAiB,IAAI,CAAC,aAAa,GACnC,EAAgB,KAAK,GAAG,CAAC,EAAO,EAAe,MAAM,EAE3D,GAAK,EAAe,MAAM,EAI1B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAe,IAAK,CACtC,IAAM,EAAc,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAe,MAAM,EAE9D,CAAC,EAAK,EAAI,CAAG,EAAe,MAAM,CAAC,EAAa,EAAE,CAAC,EAAE,AAE3D,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,KAAK,MAAM,IAAM,GAAM,EAAI,CACpD,CAEA,IAAI,CAAC,WAAW,GAClB,CAEA,aAAc,CAGZ,AAFiB,SAAS,gBAAgB,CAAC,cAElC,OAAO,CAAC,CAAC,EAAK,KACrB,EAAI,gBAAgB,CAAC,eAAe,OAAO,CAAC,CAAC,EAAM,KACjD,IAAM,EAAM,IAAI,CAAC,KAAK,CAAC,EAAM,CAAC,EAAE,AAEhC,CAAA,EAAK,SAAS,CAAG,aACjB,EAAK,SAAS,CAAG,GAEL,IAAR,IAIJ,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAI,CAAC,EACvC,EAAK,SAAS,CAAG,EACnB,EACF,GAEA,IAAI,CAAC,KAAK,GACV,IAAI,CAAC,MAAM,EACb,CAEA,OAAQ,CACN,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,AAAC,IACT,OAAT,GACF,CAAA,IAAI,CAAC,UAAU,CAAG,EAAK,UAAU,CAAC,GAAG,AAAH,CAEtC,EACF,CAEA,QAAS,CACP,IAAI,CAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAG,CAAA,GAIlC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,GACG,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,EAClD,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,CAEnD,MAKN,CAAA,IAAI,CAAC,UAAU,CAAG,EAAK,UAAU,CAAC,IAAI,CACxC,CAEA,YAAY,CAAQ,CAAE,CAChB,KAAK,SAAS,CAAC,KAAc,KAAK,SAAS,CAAC,IAAI,CAAC,QAAQ,MAC3D,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,WAAW,GAChB,IAAI,CAAC,YAAY,GAErB,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAM,EAAW,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,AAAC,GAAQ,IAAI,CAAC,eAAe,CAAC,IAEnE,IAAI,CAAC,WAAW,CAAC,EACnB,CAEA,WAAY,CACV,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAOF,IAAM,EAAgB,AAJL,IAAI,CAAC,QAAQ,GAAG,GAAG,CAAC,AAAC,GAC7B,IAAI,CAAC,eAAe,CAAC,IAAI,EAAI,CAAC,OAAO,KAGf,GAAG,CAAC,AAAC,GAAQ,EAAI,OAAO,IAEvD,IAAI,CAAC,WAAW,CAAC,EACnB,CAEA,QAAS,CACP,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAM,EAAW,EAAK,eAAe,GAErC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAI,EAAa,CACf,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAED,EAAa,IAAI,CAAC,eAAe,CAAC,GAElC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,CAAQ,CAAC,EAAE,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,AAElC,CAEA,IAAI,CAAC,WAAW,CAAC,EACnB,CAEA,UAAW,CACT,GAAI,IAAI,CAAC,SAAS,KAAO,EAAK,UAAU,CAAC,OAAO,CAC9C,OAGF,IAAM,EAAW,EAAK,eAAe,GAErC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CAC1B,IAAI,EAAa,CACf,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAGD,AADA,CAAA,EAAa,IAAI,CAAC,eAAe,CAAC,EAAW,OAAO,GAApD,EACW,OAAO,GAElB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAG,IACrB,CAAQ,CAAC,EAAE,CAAC,EAAE,CAAG,CAAU,CAAC,EAAE,AAElC,CAEA,IAAI,CAAC,WAAW,CAAC,EACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,UAAU,AACxB,CAEA,OAAQ,CACN,IAAI,CAAC,UAAU,CAAG,EAAK,UAAU,CAAC,OAAO,CACzC,IAAI,CAAC,YAAY,CAAC,EACpB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAC9B,IAAI,CAAC,UAAU,CAAG,EAAK,UAAU,CAAC,IAAI,CACtC,IAAI,CAAC,WAAW,EAClB,CAEA,WAAW,CAAG,CAAE,CACd,OAAO,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,EAC7B,CAEA,gBAAgB,CAAG,CAAE,CACnB,IAAI,EAAa,IAAI,CAAC,UAAU,CAAC,GAEjC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,IACjC,CAAU,CAAC,EAAE,GAAK,CAAU,CAAC,EAAI,EAAE,GACrC,CAAU,CAAC,EAAE,EAAI,CAAU,CAAC,EAAI,EAAE,CAClC,CAAU,CAAC,EAAI,EAAE,CAAG,EACpB,IAAI,CAAC,KAAK,EAAI,CAAU,CAAC,EAAE,EAM/B,IAFA,EAAa,IAAI,CAAC,UAAU,CAAC,GAEtB,EAAW,MAAM,CAAG,GACzB,EAAW,IAAI,CAAC,GAGlB,OAAO,CACT,CACF,CD5OA,MAAM,EAAO,IC8OI,ED5OX,EAAS,SAAS,aAAa,CAAC,WAChC,EAAQ,SAAS,aAAa,CAAC,eAC/B,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAc,SAAS,aAAa,CAAC,iBAGrC,EAAW,CACf,KAAM,EACN,IAJiB,SAAS,aAAa,CAAC,gBAKxC,KAAM,CACR,EAEA,SAAS,IACP,IAAM,EAAgB,EAAK,SAAS,GAEpC,IAAK,IAAM,KAAO,EACZ,CAAQ,CAAC,EAAI,EACf,CAAQ,CAAC,EAAI,CAAC,SAAS,CAAC,MAAM,CAAC,SAAU,IAAQ,EAGvD,CAEA,EAAO,gBAAgB,CAAC,QAAS,KAC3B,EAAO,SAAS,CAAC,QAAQ,CAAC,UAC5B,EAAK,KAAK,GACV,EAAO,SAAS,CAAC,OAAO,CAAC,QAAS,WAClC,EAAO,SAAS,CAAG,YAEnB,EAAK,OAAO,GACZ,EAAM,SAAS,CAAG,EAAK,QAAQ,GAC/B,EAAO,SAAS,CAAC,OAAO,CAAC,UAAW,SACpC,EAAO,SAAS,CAAG,SAGrB,GACF,GAEA,SAAS,gBAAgB,CAAC,QAAS,AAAC,IAClC,GAAI,AAAqB,YAArB,EAAK,SAAS,IAIlB,OAAQ,EAAE,IAAI,EACZ,IAAK,YACH,EAAK,QAAQ,GACb,KACF,KAAK,aACH,EAAK,SAAS,GACd,KACF,KAAK,UACH,EAAK,MAAM,GACX,KACF,KAAK,YACH,EAAK,QAAQ,EAEjB,CAEA,EAAM,SAAS,CAAG,EAAK,QAAQ,GAE/B,IACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    static getInitialState() {\n        return [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n    }\n    constructor(initialState = $a5fd07fa01589658$var$Game.getInitialState()){\n        this.gameStatus = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n        this.initialState = JSON.parse(JSON.stringify(initialState));\n        this.state = initialState;\n    }\n    getEmptyTiles() {\n        const emptyTiles = [];\n        for(let x = 0; x < 4; x++){\n            for(let y = 0; y < 4; y++)if (this.state[x][y] === 0) emptyTiles.push([\n                x,\n                y\n            ]);\n        }\n        return emptyTiles;\n    }\n    generateTile(count = 1) {\n        const availableTiles = this.getEmptyTiles();\n        const minTilesToAdd = Math.min(count, availableTiles.length);\n        if (!availableTiles.length) return;\n        for(let i = 0; i < minTilesToAdd; i++){\n            const randomIndex = Math.floor(Math.random() * availableTiles.length);\n            const [row, col] = availableTiles.splice(randomIndex, 1)[0];\n            this.state[row][col] = Math.random() >= 0.9 ? 4 : 2;\n        }\n        this.updateBoard();\n    }\n    updateBoard() {\n        const fieldRow = document.querySelectorAll(\".field-row\");\n        fieldRow.forEach((row, index)=>{\n            row.querySelectorAll(\".field-cell\").forEach((cell, i)=>{\n                const num = this.state[index][i];\n                cell.classList = \"field-cell\";\n                cell.innerHTML = \"\";\n                if (num === 0) return;\n                cell.classList.add(`field-cell--${num}`);\n                cell.innerHTML = num;\n            });\n        });\n        this.isWin();\n        this.isLose();\n    }\n    isWin() {\n        this.state.flat().some((tile)=>{\n            if (tile === 2048) this.gameStatus = $a5fd07fa01589658$var$Game.gameStatus.win;\n        });\n    }\n    isLose() {\n        if (this.getEmptyTiles().length > 0) return;\n        for(let r = 0; r < 4; r++)for(let c = 0; c < 4; c++){\n            if (r < 3 && this.state[r][c] === this.state[r + 1][c] || c < 3 && this.state[r][c] === this.state[r][c + 1]) return;\n        }\n        this.gameStatus = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n    updateState(newState) {\n        if (JSON.stringify(newState) !== JSON.stringify(this.getState())) {\n            this.state = newState;\n            this.updateBoard();\n            this.generateTile();\n        }\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const newState = this.getState().map((row)=>this.compareAndMerge(row));\n        this.updateState(newState);\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const newState = this.getState().map((row)=>{\n            return this.compareAndMerge([\n                ...row\n            ].reverse());\n        });\n        const reversedState = newState.map((row)=>row.reverse());\n        this.updateState(reversedState);\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const newState = $a5fd07fa01589658$var$Game.getInitialState();\n        for(let c = 0; c < 4; c++){\n            let rowFromCol = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            rowFromCol = this.compareAndMerge(rowFromCol);\n            for(let r = 0; r < 4; r++)newState[r][c] = rowFromCol[r];\n        }\n        this.updateState(newState);\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        const newState = $a5fd07fa01589658$var$Game.getInitialState();\n        for(let c = 0; c < 4; c++){\n            let rowFromCol = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            rowFromCol = this.compareAndMerge(rowFromCol.reverse());\n            rowFromCol.reverse();\n            for(let r = 0; r < 4; r++)newState[r][c] = rowFromCol[r];\n        }\n        this.updateState(newState);\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.gameStatus;\n    }\n    start() {\n        this.gameStatus = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.generateTile(2);\n    }\n    restart() {\n        this.score = 0;\n        this.state = this.initialState;\n        this.gameStatus = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.updateBoard();\n    }\n    filterZero(row) {\n        return row.filter((num)=>num !== 0);\n    }\n    compareAndMerge(row) {\n        let changedRow = this.filterZero(row);\n        for(let i = 0; i < changedRow.length; i++)if (changedRow[i] === changedRow[i + 1]) {\n            changedRow[i] += changedRow[i + 1];\n            changedRow[i + 1] = 0;\n            this.score += changedRow[i];\n        }\n        changedRow = this.filterZero(changedRow);\n        while(changedRow.length < 4)changedRow.push(0);\n        return changedRow;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messages = {\n    idle: $09e991522ca7e64e$var$startMessage,\n    win: $09e991522ca7e64e$var$winMessage,\n    lose: $09e991522ca7e64e$var$loseMessage\n};\nfunction $09e991522ca7e64e$var$showMessage() {\n    const currentStatus = $09e991522ca7e64e$var$game.getStatus();\n    for(const key in $09e991522ca7e64e$var$messages)if ($09e991522ca7e64e$var$messages[key]) $09e991522ca7e64e$var$messages[key].classList.toggle(\"hidden\", key !== currentStatus);\n}\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.classList.replace(\"start\", \"restart\");\n        $09e991522ca7e64e$var$button.innerHTML = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$button.classList.replace(\"restart\", \"start\");\n        $09e991522ca7e64e$var$button.innerHTML = \"Start\";\n    }\n    $09e991522ca7e64e$var$showMessage();\n});\ndocument.addEventListener(\"keyup\", (e)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    switch(e.code){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$showMessage();\n});\n\n\n//# sourceMappingURL=index.71ce9762.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst score = document.querySelector('.game-score');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nconst messages = {\n  idle: startMessage,\n  win: winMessage,\n  lose: loseMessage,\n};\n\nfunction showMessage() {\n  const currentStatus = game.getStatus();\n\n  for (const key in messages) {\n    if (messages[key]) {\n      messages[key].classList.toggle('hidden', key !== currentStatus);\n    }\n  }\n}\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    game.start();\n    button.classList.replace('start', 'restart');\n    button.innerHTML = 'Restart';\n  } else {\n    game.restart();\n    score.innerHTML = game.getScore();\n    button.classList.replace('restart', 'start');\n    button.innerHTML = 'Start';\n  }\n\n  showMessage();\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  score.innerHTML = game.getScore();\n\n  showMessage();\n});\n","'use strict';\n\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  static getInitialState() {\n    return [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  constructor(initialState = Game.getInitialState()) {\n    this.gameStatus = Game.gameStatus.idle;\n    this.score = 0;\n    this.initialState = JSON.parse(JSON.stringify(initialState));\n    this.state = initialState;\n  }\n\n  getEmptyTiles() {\n    const emptyTiles = [];\n\n    for (let x = 0; x < 4; x++) {\n      for (let y = 0; y < 4; y++) {\n        if (this.state[x][y] === 0) {\n          emptyTiles.push([x, y]);\n        }\n      }\n    }\n\n    return emptyTiles;\n  }\n\n  generateTile(count = 1) {\n    const availableTiles = this.getEmptyTiles();\n    const minTilesToAdd = Math.min(count, availableTiles.length);\n\n    if (!availableTiles.length) {\n      return;\n    }\n\n    for (let i = 0; i < minTilesToAdd; i++) {\n      const randomIndex = Math.floor(Math.random() * availableTiles.length);\n\n      const [row, col] = availableTiles.splice(randomIndex, 1)[0];\n\n      this.state[row][col] = Math.random() >= 0.9 ? 4 : 2;\n    }\n\n    this.updateBoard();\n  }\n\n  updateBoard() {\n    const fieldRow = document.querySelectorAll('.field-row');\n\n    fieldRow.forEach((row, index) => {\n      row.querySelectorAll('.field-cell').forEach((cell, i) => {\n        const num = this.state[index][i];\n\n        cell.classList = 'field-cell';\n        cell.innerHTML = '';\n\n        if (num === 0) {\n          return;\n        }\n\n        cell.classList.add(`field-cell--${num}`);\n        cell.innerHTML = num;\n      });\n    });\n\n    this.isWin();\n    this.isLose();\n  }\n\n  isWin() {\n    this.state.flat().some((tile) => {\n      if (tile === 2048) {\n        this.gameStatus = Game.gameStatus.win;\n      }\n    });\n  }\n\n  isLose() {\n    if (this.getEmptyTiles().length > 0) {\n      return;\n    }\n\n    for (let r = 0; r < 4; r++) {\n      for (let c = 0; c < 4; c++) {\n        if (\n          (r < 3 && this.state[r][c] === this.state[r + 1][c]) ||\n          (c < 3 && this.state[r][c] === this.state[r][c + 1])\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.gameStatus = Game.gameStatus.lose;\n  }\n\n  updateState(newState) {\n    if (JSON.stringify(newState) !== JSON.stringify(this.getState())) {\n      this.state = newState;\n      this.updateBoard();\n      this.generateTile();\n    }\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const newState = this.getState().map((row) => this.compareAndMerge(row));\n\n    this.updateState(newState);\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const newState = this.getState().map((row) => {\n      return this.compareAndMerge([...row].reverse());\n    });\n\n    const reversedState = newState.map((row) => row.reverse());\n\n    this.updateState(reversedState);\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const newState = Game.getInitialState();\n\n    for (let c = 0; c < 4; c++) {\n      let rowFromCol = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      rowFromCol = this.compareAndMerge(rowFromCol);\n\n      for (let r = 0; r < 4; r++) {\n        newState[r][c] = rowFromCol[r];\n      }\n    }\n\n    this.updateState(newState);\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    const newState = Game.getInitialState();\n\n    for (let c = 0; c < 4; c++) {\n      let rowFromCol = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      rowFromCol = this.compareAndMerge(rowFromCol.reverse());\n      rowFromCol.reverse();\n\n      for (let r = 0; r < 4; r++) {\n        newState[r][c] = rowFromCol[r];\n      }\n    }\n\n    this.updateState(newState);\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.gameStatus;\n  }\n\n  start() {\n    this.gameStatus = Game.gameStatus.playing;\n    this.generateTile(2);\n  }\n\n  restart() {\n    this.score = 0;\n    this.state = this.initialState;\n    this.gameStatus = Game.gameStatus.idle;\n    this.updateBoard();\n  }\n\n  filterZero(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  compareAndMerge(row) {\n    let changedRow = this.filterZero(row);\n\n    for (let i = 0; i < changedRow.length; i++) {\n      if (changedRow[i] === changedRow[i + 1]) {\n        changedRow[i] += changedRow[i + 1];\n        changedRow[i + 1] = 0;\n        this.score += changedRow[i];\n      }\n    }\n\n    changedRow = this.filterZero(changedRow);\n\n    while (changedRow.length < 4) {\n      changedRow.push(0);\n    }\n\n    return changedRow;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","getInitialState","constructor","initialState","score","JSON","parse","stringify","state","getEmptyTiles","emptyTiles","x","y","push","generateTile","count","availableTiles","minTilesToAdd","Math","min","length","i","randomIndex","floor","random","row","col","splice","updateBoard","fieldRow","document","querySelectorAll","forEach","index","cell","num","classList","innerHTML","add","isWin","isLose","flat","some","tile","r","c","updateState","newState","getState","moveLeft","getStatus","map","compareAndMerge","moveRight","reversedState","reverse","moveUp","rowFromCol","moveDown","getScore","start","restart","filterZero","filter","changedRow","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$messages","$09e991522ca7e64e$var$showMessage","currentStatus","key","toggle","addEventListener","contains","replace","e","code"],"version":3,"file":"index.71ce9762.js.map"}